apiVersion: v1
kind: Service
metadata:
  name: livy
  labels:
    component: livy
    workerGroup: main
spec:
  type: ClusterIP
  ports:
  - port: 8998
    name: livy
  - port: 10000
    name: thrift
  selector:
    component: livy
    workerGroup: main
---
apiVersion: v1
kind: Service
metadata:
  name: livy-headless
spec:
  selector:
    component: livy
    workerGroup: main
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: livy
spec:
  serviceName: livy-headless
  replicas: 1
  selector:
    matchLabels:
      component: livy
      workerGroup: main
  template:
    metadata:
      labels:
        component: livy
        workerGroup: main
    spec:
      terminationGracePeriodSeconds: 0
      tolerations:
      - key: scale
        operator: Exists
        effect: NoSchedule          
{{ if .Values.nodeGroupLabel }}
      nodeSelector:
        {{ .Values.nodeGroupLabel }}: core
{{ end }}      
      imagePullSecrets:
      - name: {{ .Values.registry.secret.name }}    
      containers:
      - name: livy
        image: {{ .Values.registry.repository }}/{{ .Values.imageSparkCommon }}:{{ .Values.imageTag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
        - /bin/bash
        - /tmp/hadoop-config/bootstrap.sh
        - -d
        env:
        - name: SCALE_DOMAIN
          value: {{ .Values.ingress.domain }} 
        - name: MASTER
          value: spark://sparkmaster:7077
{{ if not .Values.components.hdfs }}           
        - name: HDFS_DISABLED
          value: "true"
{{ end }}
{{ if .Values.components.logging }}
        - name: ELASTIC_APM_SERVER
          value: http://apm-server:8200
{{ end }}         
{{ if .Values.defineResources }}             
        resources:
          requests:
            memory: "1024Mi"
            cpu: "1100m"
          limits:
            # memory: "4096Mi"
            cpu: "2000m"
{{ end }}
        volumeMounts:
        - name: scale-config
          mountPath: /tmp/hadoop-config          
        - name: storage
          mountPath: /storage
          subPath: storage
        - name: hdfs
          mountPath: /hdfs
      - name: hive-metastore-db
        image:  {{ .Values.mariadb.image.registry }}/{{ .Values.mariadb.image.repository }}:{{ .Values.mariadb.image.version }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
{{ if .Values.defineResources }}
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            cpu: "2000m"
{{ end }}            
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: hive
          - name:  MYSQL_DATABASE
            value: metastore
          - name: MYSQL_USER
            value: hive
          - name: MYSQL_PASSWORD
            value: hive
        volumeMounts:
          - name: hive-metastore-db
            mountPath: /var/lib/mysql
      volumes:
      - name: scale-config
        configMap:
          name: scale-config
      - name: hive-metastore-db
        emptyDir: {}          
      - name: hdfs
        persistentVolumeClaim:
          claimName: hdfs    
      - name: storage
{{ if eq .Values.kubernetesType "azure" }}
        azureFile:
          secretName: scale-storage-secret
          shareName: files
          readOnly: false
{{ else if eq .Values.kubernetesType "aws" }}
        persistentVolumeClaim:
          claimName: efs-storage-claim
{{ else if eq .Values.kubernetesType "saic" }}
        persistentVolumeClaim:
          claimName: saic-storage-claim
{{ else if eq .Values.kubernetesType "minikube" }}          
        hostPath:
          path: /data/scale-storage
          type: DirectoryOrCreate
{{ else }}
        emptyDir: {}
{{ end }}
