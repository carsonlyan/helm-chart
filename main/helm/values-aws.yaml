kubernetesType: aws # (aws|azure|minikube)

nodeGroupLabel: alpha.eksctl.io/nodegroup-name

defineResources: true

components:
  logging: true
  git: false
  gitea: true
  jenkins: true
  superset: true
  hdfs: true
  dnsAutoScaler: false

ingress:
  domain: cluster03.scale-mscsoftware.com
  tls:
    enabled: false
    email: changeme
  services:
    - name: admin
      service: admin
      port: 80
    - name: api
      service: scale-api
      port: 8080
    - name: spark
      service: sparkmaster
      port: 8080
    - name: jupyter
      service: jupyter
      port: 8000
    - name: livy
      service: livy
      port: 8998
    - name: logs
      service: kibana-logging
      port: 5601
    - name: jenkins
      service: jenkins
      port: 8080
    - name: superset
      service: superset
      port: 8088
    - name: gitea
      service: gitea
      port: 3000    
  
  # auth: 
  #   message: MSC Internal Only
  #   value: scale:$apr1$vMBm2rHD$XNucU3s559l2Lw4s0Z5pV. # created with: htpasswd -nb scale dev

  # to change at runtime, 
  # kubectl annotate ingress/scale-ingress nginx.ingress.kubernetes.io/whitelist-source-range=24.20.53.58/32 --overwrite
  # kubectl annotate ingress/scale-ingress-hdfs nginx.ingress.kubernetes.io/whitelist-source-range=24.20.53.58/32 --overwrite
  whitelist: 192.207.69.1/32,24.20.53.58/32 # MSC NB office (use https://www.whatsmyip.org/ to confirm your local ip)

openId:
  url: https://scale-auth.azurewebsites.net/auth/realms/master
  clientId: scale
  clientSecret: b1a6d557-2adf-482a-bf32-fb00ef9a4cce
  encryptionKey: vGcLt8ZUdPX5fXhtLZaPHZkGWHZrT6aa
  group: cluster-dev

registry:
  url: https://index.docker.io/v1/    
  repository: mscsoftware
  secret:
    name: scale-registry
    user: mscsoftware
    password: fill-me-in
  publicImagesSecretNeeded: false

imageTag : 0.1.0.BETA
imagePullPolicy: Always

imageAdmin: scale-admin
imageCollector: scale-collector
imageDemodataAdams: scale-demodata-adams
imageDemodataVtd: scale-demodata
imageGit: scale-git
imageJenkins: scale-jenkins
imageScaleApi: scale-api
imageScaleServices: scale-services
imageSparkCommon: scale-spark

jenkins:
  pv:
    size: 10G
    class: gp2
    
jupyter:
  pv:
    size: 100G
    class: gp2

hdfs:
  nfsIP: 10.0.200.2
  pvcClass: gp2
  
  dn:
    scale: 5
    size: 100G
  nn:
    size: 5G

apm:
  image:
    registry: docker.elastic.co
    repository: apm/apm-server
    version: 7.5.1

curator:
  image:
    registry: docker.io
    repository: python
    version: 3.6-alpine

elasticsearch:
  pv:
    size: 100G
    class: gp2
  image:
    registry: docker.elastic.co
    repository: elasticsearch/elasticsearch
    version: 7.5.1

alpine:
  image:
    registry: docker.io
    repository: alpine
    version: 3.6    

filebeat:
  image:
    registry: docker.elastic.co
    repository: beats/filebeat
    version: 7.5.1

gatekeeper:
  image:
    registry: docker.io
    repository: carlosedp/keycloak-gatekeeper
    version: v9.0.0

kibana:
  image:
    registry: docker.elastic.co
    repository: kibana/kibana
    version: 7.5.1

kubeStateMetrics:
  image:
    registry: quay.io
    repository: coreos/kube-state-metrics
    version: 1.8.0

logstash:
  image:
    registry: docker.elastic.co
    repository: logstash/logstash
    version: 7.5.1

metricbeat:
  image:
    registry: docker.elastic.co
    repository: beats/metricbeat  
    version: 7.5.1

gitea:
  pv:
    sizeDb: 10G
    sizeData: 10G
    class: gp2
  image:
    registry: docker.io
    repository: gitea/gitea
    version: 1.8.3

mariadb:
  image:
    registry: docker.io
    repository: mariadb  
    version: 10

dnsAutoScaler:
  image:
    registry: k8s.gcr.io
    repository: cluster-proportional-autoscaler-amd64
    version: 1.6.0

superset:
  pv:
    sizeDb: 1G
    class: gp2
  image:
    registry: docker.io
    repository: amancevice/superset
    version: 0.37.0

kafka:
  global:
    imageRegistry: docker.io
    imagePullSecrets: []
  kafka:
    fullname: kafka
  replicaCount: 3
  deleteTopicEnable: true
  logRetentionHours: 8760
  nodeSelector: {"alpha.eksctl.io/nodegroup-name": "core"}
  tolerations: [{"key": "scale", "operator": "Exists", "effect": "NoSchedule"}]
  zookeeper:
    nodeSelector: {"alpha.eksctl.io/nodegroup-name": "core"}
    tolerations: [{"key": "scale", "operator": "Exists", "effect": "NoSchedule"}]
