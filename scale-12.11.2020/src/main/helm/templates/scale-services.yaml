apiVersion: v1
kind: ServiceAccount
metadata:
  name: scale-services
---
apiVersion: v1
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: scale
subjects:
- kind: ServiceAccount
  name: scale-services
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: scale-services
  labels:
    component: scale-services
spec:
  type: ClusterIP
  ports:
  - port: 8080
    name: rest
  selector:
    component: scale-services
---
apiVersion: apps/v1
kind: Deployment 
metadata:
  name: scale-services
spec:
  replicas: 1
  selector:
    matchLabels:
      component: scale-services
  template:
    metadata:
      labels:
        component: scale-services
    spec:
      serviceAccountName: scale-services
      terminationGracePeriodSeconds: 0
      tolerations:
        - key: scale
          operator: Exists
          effect: NoSchedule          
{{ if .Values.nodeGroupLabel }}
      nodeSelector:
        {{ .Values.nodeGroupLabel }}: core
{{ end }}
      imagePullSecrets:
      - name: {{ .Values.registry.secret.name }}
      containers:
      - name: scale-services
        image: {{ .Values.registry.repository }}/{{ .Values.imageScaleServices }}:{{ .Values.imageTag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
        - name: SCALE_REST
          value: http://localhost:8080
        - name: SCALE_DOMAIN
          value: {{ .Values.ingress.domain }}
{{ if eq .Values.kubernetesType "azure" }}
        - name: AZURE_SP_USER
          valueFrom:
            secretKeyRef:
              name: azure-service-principal
              key: user
        - name: AZURE_SP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: azure-service-principal
              key: password
        - name: AZURE_SP_TENANT
          valueFrom:
            secretKeyRef:
              name: azure-service-principal
              key: tenant
{{ else if eq .Values.kubernetesType "aws" }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-service-principal
              key: user
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-service-principal
              key: password
        - name: AWS_DEFAULT_REGION
          valueFrom:
            secretKeyRef:
              name: aws-service-principal
              key: region   
{{ else if eq .Values.kubernetesType "saic" }}
        - name: SAIC_CLUSTER
          value: "true"        
{{ end }}
{{ if .Values.defineResources }}
        resources:
          requests:
            memory: "1024Mi"
            cpu: "400m"
          limits:
            # memory: "4096Mi"
            cpu: "2000m"
{{ end }}
