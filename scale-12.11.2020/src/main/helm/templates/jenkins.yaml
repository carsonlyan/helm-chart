{{ if .Values.components.jenkins }}
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  labels:
    component: jenkins
    workerGroup: main
spec:
  type: ClusterIP
  ports:
  - port: 8080
    name: web
  - port: 4040
    name: spark    
  selector:
    component: jenkins
    workerGroup: main
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jenkins
spec:
  serviceName: jenkins
  replicas: 1
  selector:
    matchLabels:
      component: jenkins  
  template:
    metadata:
      labels:
        component: jenkins
        workerGroup: main
    spec:
      terminationGracePeriodSeconds: 0
      tolerations:
        - key: scale
          operator: Exists
          effect: NoSchedule      
{{ if .Values.nodeGroupLabel }}
      nodeSelector:
        {{ .Values.nodeGroupLabel }}: core
{{ end }}
      imagePullSecrets:
      - name: {{ .Values.registry.secret.name }}
      containers:
      - name: jenkins
        image: {{ .Values.registry.repository }}/{{ .Values.imageJenkins }}:{{ .Values.imageTag }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        command:
        - /bin/bash
        - /tmp/hadoop-config/bootstrap.sh
        - -d
        env:
        - name: USER
          value: jenkins
        - name: SCALE_DOMAIN
          value: {{ .Values.ingress.domain }}
        - name: SCALE_REGISTRY
          value: {{ .Values.registry.repository }}
        - name: SCALE_REGISTRY_URL
          value: {{ .Values.registry.url }}
        - name: SCALE_TAG
          value: {{ .Values.imageTag }}
{{ if .Values.components.logging }}
        - name: ELASTIC_APM_SERVER
          value: http://apm-server:8200
{{ end }}
{{ if .Values.defineResources }}            
        resources:
          requests:
            memory: 1Gi
            cpu: 1500m
{{ end }}            
        volumeMounts:
          - name: scale-config
            mountPath: /tmp/hadoop-config
          - mountPath: /var/run/docker.sock
            name: docker-socket-volume            
          - name: hdfs
            mountPath: /hdfs
          - name: storage
            mountPath: /storage
            subPath: storage
{{ if .Values.jenkins.pv.class }}
          - name: jobs
            mountPath: /var/jenkins_home/jobs          
{{ end }}            
        securityContext:
          privileged: true
      volumes:
        - name: docker-socket-volume
          hostPath:
            path: /var/run/docker.sock
            type: File
        - name: scale-config
          configMap:
            name: scale-config
        - name: hdfs
          persistentVolumeClaim:
            claimName: hdfs
        - name: storage
{{ if eq .Values.kubernetesType "azure" }}
          azureFile:
            secretName: scale-storage-secret
            shareName: files
            readOnly: false
{{ else if eq .Values.kubernetesType "aws" }}
          persistentVolumeClaim:
            claimName: efs-storage-claim
{{ else }}
          emptyDir: {}
{{ end }}
{{ if .Values.jenkins.pv.class }}
  volumeClaimTemplates:
    - metadata:
        name: jobs
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.jenkins.pv.class }}
        resources:
          requests:
            storage: {{ .Values.jenkins.pv.size }}
{{ end }}        
{{ end }}
